#include<iostream>
#include <cmath>
#pragma comment(linker, "/STACK:99999999999999")
using namespace std;
const int n = 10;//max Z1
const int m = 100;//max Z2
const int q = 5;//Z1+Z2 at 1 time
const double lyambda = 15;//Z1
const double mu = 10;//Z2
const double eta = 5;//Z1+Z2, =1/avg_time

const int row_num = (n + 1)*(m + 1), col_num = (n + 1)*(m + 1) + 1;

void partially_pivot(double arr[row_num][col_num], int pivot_row, int pivot_col) // for GJ
{
	double temp;
	int i, large_pivot_row = pivot_row;

	for (i = pivot_row; i < row_num; i++)
		if (arr[i][pivot_col] > arr[large_pivot_row][pivot_col])
			large_pivot_row = i;

	if (pivot_row != large_pivot_row)
		for (i = 0; i < col_num; i++)
		{
			temp = arr[large_pivot_row][i];
			arr[large_pivot_row][i] = arr[pivot_row][i];
			arr[pivot_row][i] = temp;
		}
}

void Gauss(double arrkoeff[row_num][col_num])//Gauss-Jordan
{
	double diagonal_element = 0, flag = 0;
	for (int i = 0; i < row_num; i++)//GJ
		for (int j = 0; j < col_num; j++)
			if (i == j)
			{
				partially_pivot(arrkoeff, i, j);
				diagonal_element = arrkoeff[i][j];
				for (int l = 0; l < col_num; l++)
					arrkoeff[i][l] /= diagonal_element;

				for (int k = 0; k < row_num; k++)
				{
					flag = arrkoeff[k][j];
					for (int l = 0; l < col_num; l++)
						if (k != i)
							arrkoeff[k][l] = (arrkoeff[k][l]) - flag * (arrkoeff[i][l]);
				}
			}
}

double min(int a, int b, int c)
{
	int min = a;

	if (b < min)
		min = b;

	if (c < min)
		min = c;

	return min;
}

int main()
{
	double arrkoeff[row_num][col_num];
	for (int i = 0; i < row_num; i++)
		for (int j = 0; j < col_num; j++)
			arrkoeff[i][j] = 0;
	int k = 0;//str; P(i, j) <-> arrkoeff[k][i+j*(n+1)]

	arrkoeff[k][0] = lyambda + mu;//P00
	arrkoeff[k][1 + n + 1] = -1 * eta;//P11
	k++;

	for (int i = 1; i < n; i++)
	{
		arrkoeff[k][i] = lyambda + mu;//Pi0
		arrkoeff[k][i - 1] = -1 * lyambda;//P(i-1)0
		arrkoeff[k][i + 1 + (n + 1)] = -1 * eta;//P(i+1)1
		k++;
	}

	arrkoeff[k][n] = mu;//Pn0
	arrkoeff[k][n - 1] = -1 * lyambda;//P(n-1)0
	k++;

	for (int j = 1; j < m; j++)
	{
		arrkoeff[k][j*(n + 1)] = lyambda + mu;//P0j
		arrkoeff[k][(j - 1)*(n + 1)] = -1 * mu;//P0(j-1)
		arrkoeff[k][1 + (j + 1)*(n + 1)] = -1 * eta;//P1(j+1)
		k++;
	}

	for (int i = 1; i < n; i++)
		for (int j = 1; j < m; j++)
		{
			arrkoeff[k][i + j * (n + 1)] = lyambda + mu + min(q, i, j)*eta;//Pij
			arrkoeff[k][(i - 1) + j * (n + 1)] = -1 * lyambda;//P(i-1)j
			arrkoeff[k][i + (j - 1) * (n + 1)] = -1 * mu;//Pi(j-1)
			arrkoeff[k][(i + 1) + (j + 1) * (n + 1)] = -1 * min(q, (i + 1), (j + 1)) * eta;//P(i+1)(j+1)
			k++;
		}

	for (int j = 1; j < m; j++)
	{
		arrkoeff[k][n + j * (n + 1)] = mu + min(q, n, j) * eta;//Pnj
		arrkoeff[k][(n - 1) + j * (n + 1)] = -1 * lyambda;//P(n-1)j
		arrkoeff[k][n + (j - 1) * (n + 1)] = -1 * mu;//Pn(j-1)
		k++;
	}

	arrkoeff[k][m * (n + 1)] = lyambda;//P0m
	arrkoeff[k][(m - 1) * (n + 1)] = -1 * mu;//P0(m-1)
	k++;

	for (int i = 1; i < n; i++)
	{
		arrkoeff[k][i + m * (n + 1)] = lyambda + min(q, i, m) * eta;//Pim
		arrkoeff[k][(i - 1) + m * (n + 1)] = -1 * lyambda;//P(i-1)m
		arrkoeff[k][i + (m - 1) * (n + 1)] = -1 * mu;//Pi(m-1)
		k++;
	}

	/*arrkoeff[k][n + m * (n + 1)] = min(q, n, m) * eta;//Pnm
	arrkoeff[k][(n - 1) + m * (n + 1)] = -1 * lyambda;//P(n-1)m
	arrkoeff[k][n + (m - 1) * (n + 1)] = -1 * mu;//Pn(m-1)
	double tmp = 0;
	for (int j = 0; j < col_num; j++)
	{
		for (int i = 0; i < row_num; i++)
		{
			tmp += arrkoeff[i][j];
		}
		cout << tmp << " ";
	}
	cout << endl;*/

	for (int j = 0; j < col_num; j++)
		arrkoeff[k][j] = 1;//SUM (Pij)=1

	Gauss(arrkoeff);

	double arrP[n + 1][m + 1];
	for (int j = 0; j < m + 1; j++)
		for (int i = 0; i < n + 1; i++)
			arrP[i][j] = arrkoeff[i + j * (n + 1)][col_num - 1];

	cout << fixed;
	cout.precision(3);
	for (int j = m; j > -1; j--)
	{
		for (int i = 0; i < n + 1; i++)
			cout << "P(" << i << "," << j << ")=" << arrP[i][j] << "\t";
		cout << endl;
	}
	cout << endl;

	double n_lost = 0;
	for (int j = 0; j < m + 1; j++)
		n_lost += arrP[n][j];

	double m_lost = 0;
	for (int i = 0; i < n + 1; i++)
		m_lost += arrP[i][m];

	double n_avg = 0;
	for (int i = 0; i < n + 1; i++)
		for (int j = 0; j < m + 1; j++)
			n_avg += i * arrP[i][j];

	double tn_avg = 0;
	tn_avg = n_avg / (lyambda*(1 - n_lost));

	double m_avg = 0;
	for (int i = 0; i < n + 1; i++)
		for (int j = 0; j < m + 1; j++)
			m_avg += j * arrP[i][j];

	double tm_avg = 0;
	tm_avg = m_avg / (mu*(1 - m_lost));

	cout << fixed;
	cout.precision(0);
	cout << "lyambda=" << lyambda << ", mu=" << mu << ", eta=" << eta << ", n=" << n << ", m=" << m << ", q=" << q << endl;
	cout << fixed;
	cout.precision(10);
	cout << "Loss1(lyambda, n) = " << n_lost << ",  Loss2(mu, m) = " << m_lost << endl;
	cout << "avgTime2(lyambda, n) = " << tn_avg << ",  avgTime2(mu, m) = " << tm_avg << endl;

	system("pause");
	return 0;
}
